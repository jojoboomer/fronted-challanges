---
import Card from "@components/pages/shoping-cart/Card.astro";
import Modal from "@components/pages/shoping-cart/Modal.astro";
import Layout from "@layouts/Layout.astro";
import { css } from "@styled-system/css";
import { main } from "@styles/cart";
import datajson from "./shop-data.json";
---

<Layout title={"Product list with cart"}>
  <main class={main}>
    <div class="product-list">
      <h2 class={css({ fontSize: "2.5rem", fontWeight: "extrabold" })}>
        Desserts
      </h2>
      <div class="product-list-container">
        {datajson.map((e) => <Card item={e} />)}
      </div>
    </div>
    <div class="cart">
      <h2
        class={css({
          color: "accent.red-cart",
          fontWeight: "extrabold",
          fontSize: "1.5rem",
        })}
      >
        Your Cart (<span id="itemsOnCart"></span>)
      </h2>
      <div
        class={css({
          color: "primary.rose-500",
          display: "flex",
          flexDir: "column",
          justifyContent: "center",
        })}
      >
        <ul class={css({ width: "100%" })} id="cart"></ul>
      </div>
    </div>
    <Modal />
  </main>

  <script>
    import {
  getEmptyCart,
  getFullCart,
  getTotal,
  getTotalPrice,
  renderModal,
} from "@utils/cart";
    interface Item {
      name: string;
      cant: number;
      price: number;
    }

    document.addEventListener("DOMContentLoaded", () => {
      var cart: Item[] = [];
      const cartElement = document.getElementById("cart");

      const renderCart = () => {
        const total = getTotal(cart);
        const totalPrice = getTotalPrice(cart).toFixed(2);

        //clear cart
        if (cartElement) cartElement.innerHTML = "";

        //set total items text
        let totalElement = document.querySelector("#itemsOnCart");
        if (totalElement) totalElement.textContent = total.toString();

        //render cart
        if (cart.length === 0) {
          const li = getEmptyCart();
          cartElement?.appendChild(li);
        } else {
          cart.forEach((product) => {
            const li = getFullCart(product);
            cartElement?.appendChild(li);
          });
          const div = document.createElement("div");
          div.classList.add("cart-footer");
          div.innerHTML = `
          <div class='total-order'><span>Order Total</span> <span class="total">$${totalPrice}</span></div>
          <div class='delivery'>
            <svg xmlns="http://www.w3.org/2000/svg" width="21" height="20" fill="none" viewBox="0 0 21 20"><path fill="#1EA575" d="M8 18.75H6.125V17.5H8V9.729L5.803 8.41l.644-1.072 2.196 1.318a1.256 1.256 0 0 1 .607 1.072V17.5A1.25 1.25 0 0 1 8 18.75Z"/><path fill="#1EA575" d="M14.25 18.75h-1.875a1.25 1.25 0 0 1-1.25-1.25v-6.875h3.75a2.498 2.498 0 0 0 2.488-2.747 2.594 2.594 0 0 0-2.622-2.253h-.99l-.11-.487C13.283 3.56 11.769 2.5 9.875 2.5a3.762 3.762 0 0 0-3.4 2.179l-.194.417-.54-.072A1.876 1.876 0 0 0 5.5 5a2.5 2.5 0 1 0 0 5v1.25a3.75 3.75 0 0 1 0-7.5h.05a5.019 5.019 0 0 1 4.325-2.5c2.3 0 4.182 1.236 4.845 3.125h.02a3.852 3.852 0 0 1 3.868 3.384 3.75 3.75 0 0 1-3.733 4.116h-2.5V17.5h1.875v1.25Z"/></svg>
            <p>This is a <span>carbon-neutral</span> delivery</div></p>
          <div class='clear'><button class='btn-clear'>Confirm Order</button></div>
        `;
          cartElement?.appendChild(div);
          document
            .querySelector(".btn-clear")
            ?.addEventListener("click", () => {
              document.querySelector(".modal")?.classList.remove("hidden");
              renderModal(cart, totalPrice);
            });
        }
      };
      renderCart();

      document.querySelectorAll(".card").forEach((card) => {
        //CARD BUTTON
        card.querySelectorAll(".inputContainer").forEach((container) => {
          const btn = container.querySelector(".cartBtn");
          const input = container.querySelector(".input");
          btn?.addEventListener("click", () => {
            card.querySelector("img")?.classList.add("selected");
            btn.classList.add("hidden");
            input?.classList.remove("hidden");
          });
        });

        const cant = 1;
        const name = card.querySelector(".name")?.textContent || "";
        const price = Number.parseFloat(
          (card.querySelector(".price") as HTMLElement)?.dataset.price || "0"
        );

        //ACTION IN CARD +-
        card.querySelectorAll(".input").forEach((div) => {
          const botonIncrementar = div.querySelector(".plus");
          const botonDecrementar = div.querySelector(".minus");
          const valorContador = div.querySelector(".counter");

          //+ ACTION
          botonIncrementar?.addEventListener("click", () => {
            if (valorContador instanceof HTMLInputElement) {
              let contador = parseInt(valorContador.value) || 0;
              contador++;
              valorContador.value = contador.toString();
            }

            const indexFound = cart.findIndex(
              (element) => element.name == name
            );
            if (indexFound !== -1) {
              cart[indexFound].cant = cart[indexFound].cant + 1;
            } else {
              cart.push({ name, cant, price });
            }

            renderCart();
          });

          //- ACTION
          botonDecrementar?.addEventListener("click", () => {
            if (valorContador instanceof HTMLInputElement) {
              let contador = parseInt(valorContador.value) || 0;
              if (contador > 0) {
                contador--;
                valorContador.value = contador.toString();
              }
            }
            const indexFound = cart.findIndex(
              (element) => element.name == name
            );
            cart[indexFound].cant = cart[indexFound].cant - 1;
            if (cart[indexFound].cant === 0) {
              const btn = card.querySelector(".cartBtn");
              const input = card.querySelector(".input");
              cart.splice(indexFound, 1);
              input?.classList.add("hidden");
              btn?.classList.remove("hidden");
              card.querySelector("img")?.classList.remove("selected");
            }
            renderCart();
          });
        });
      });

      //CLEAR ACTION IN MODAL
      document.querySelector(".btn-clear")?.addEventListener("click", () => {
        document.querySelector(".modal")?.classList.add("hidden");
        cart = [];
        document.querySelectorAll(".cartBtn").forEach((e) => {
          e.classList.remove("hidden");
        });
        document.querySelectorAll("img").forEach((e) => {
          e.classList.remove("selected");
        });
        document.querySelectorAll(".input").forEach((e) => {
          const counter = e.querySelector(".counter") as HTMLInputElement | null;
          if (counter) {
            counter.value = "0";
          }
          e.classList.add("hidden");
        });
        renderCart();
      });
    });
  </script>

  <style is:global>
    .hidden {
      display: none;
    }
    .selected {
      border: 1px solid;
      border-color: var(--cart-red);
    }
    .item-list {
      display: flex;
      justify-content: center;
      flex-direction: column;
      align-items: center;
      text-align: center;
    }
    .item-cart {
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding-top: 0.75rem;
      padding-bottom: 0.75rem;
      border-bottom: 1px solid rgba(128, 128, 128, 0.1);
    }
    .item-info {
      flex: 1;
      display: flex;
      flex-direction: column;
      gap: 0.3rem;
      h5 {
        font-weight: 600;
        color: black;
      }
    }
    .cart-footer {
      color: black;
      display: flex;
      flex-direction: column;
      gap: 1rem;
    }
    .total-order {
      width: 100%;
      display: flex;
      justify-content: space-between;
      padding-top: 0.75rem;
      padding-bottom: 0.75rem;
      align-items: center;
      .total {
        font-size: 24px;
        font-weight: 600;
      }
    }
    .delivery {
      display: inline-flex;
      background: var(--cart-bg);
      padding-left: 3rem;
      padding-right: 3rem;
      padding-top: 1rem;
      padding-bottom: 1rem;
      text-align: center;
      span {
        font-weight: 600;
      }
      svg {
        margin-right: 8px;
      }
    }
    .btn-clear {
      width: 100%;
      background: var(--cart-red);
      cursor: pointer;
      padding-top: 0.5rem;
      padding-bottom: 0.5rem;
      border-radius: 25rem;
      color: white;
    }
    .item-cart-final {
      display: flex;
      align-items: center;
      width: 100%;
      padding: 1rem;
      background-color: var(--cart-bg);
      gap: 1rem;
      border-bottom: 1px solid rgba(128, 128, 128, 0.1);
      img {
        width: 3rem;
        background-position: center;
        background-size: cover;
        aspect-ratio: 1/1;
      }
      div.data {
        flex: 1;
        h5 {
          font-weight: 600;
        }
        span {
          color: hsl(7, 20%, 60%);
        }
      }
      div.total-order-list {
        width: 100%;
        display: flex;
        justify-content: space-between;
        align-items: center;
        .total {
          font-weight: 600;
        }
      }
    }
  </style>
</Layout>
